<link href="https://cdn.jsdelivr.net/npm/chart.js" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/animejs/lib/anime.min.js"></script>
@model List<proyecto_peti.Models.CadenaValor>
@using proyecto_peti.Models
@{
    ViewBag.Title = "Cadena de Valor";
    var fortalezasDebilidades = ViewBag.FortalezasDebilidades as ObservacionesCadenaValor;
    double? potencialMejora = ViewBag.PotencialMejora as double?;
}

<h2>Evaluación de la Cadena de Valor</h2>
<br />
<h6>
    A continuación marque con una X para valorar su empresa en función de cada una de las afirmaciones,
    de tal forma que:
    <br />1 = En total desacuerdo;
    <br />2 = No está de acuerdo;
    <br />3 = Está de acuerdo;
    <br />4 = Está bastante de acuerdo;
    <br />5 = En total acuerdo.
    <br />En caso de no completar una casilla le aparecerá el mensaje de error.
</h6>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">@TempData["SuccessMessage"]</div>
}

@using (Html.BeginForm("Index", "CadenaValor", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <table class="table table-striped">
        <thead>
            <tr>
                <th style="width:5%;">#</th>
                <th>Pregunta</th>
                <th style="width:15%;">Valoración (1 a 5)</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.Count; i++)
            {
                <tr>
                    <td>@Model[i].PreguntaNumero</td>
                    <td>@Model[i].PreguntaTexto</td>
                    <td>
                        @Html.HiddenFor(m => m[i].Id)
                        @Html.HiddenFor(m => m[i].PlanId)
                        @Html.HiddenFor(m => m[i].PreguntaNumero)
                        @Html.HiddenFor(m => m[i].PreguntaTexto)

                        @Html.DropDownListFor(m => m[i].Valoracion,
                            new SelectList(
                                new List<SelectListItem> {
                                    new SelectListItem{ Text = "1", Value="1"},
                                    new SelectListItem{ Text = "2", Value="2"},
                                    new SelectListItem{ Text = "3", Value="3"},
                                    new SelectListItem{ Text = "4", Value="4"},
                                    new SelectListItem{ Text = "5", Value="5"},
                                }, "Value", "Text", Model[i].Valoracion),
                            "Seleccione", new { @class = "form-control", required = "required" })
                        @Html.ValidationMessageFor(m => m[i].Valoracion, "", new { @class = "text-danger" })
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <h2>Reflexione sobre el resultado obtenido. Anote aquellas observaciones que puedan ser de su interés. Identifique sus fortalezas y debilidades respecto a su cadena de valor</h2>
    <br />

    <h5>Observaciones - Fortalezas</h5>
    <div class="form-group">
        @Html.LabelFor(m => fortalezasDebilidades.Fortalezas1)
        @Html.TextBoxFor(m => fortalezasDebilidades.Fortalezas1, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => fortalezasDebilidades.Fortalezas1, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => fortalezasDebilidades.Fortalezas2)
        @Html.TextBoxFor(m => fortalezasDebilidades.Fortalezas2, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => fortalezasDebilidades.Fortalezas2, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => fortalezasDebilidades.Fortalezas3)
        @Html.TextBoxFor(m => fortalezasDebilidades.Fortalezas3, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => fortalezasDebilidades.Fortalezas3, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => fortalezasDebilidades.Fortalezas4)
        @Html.TextBoxFor(m => fortalezasDebilidades.Fortalezas4, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => fortalezasDebilidades.Fortalezas4, "", new { @class = "text-danger" })
    </div>

    <h5>Observaciones - Debilidades</h5>
    <div class="form-group">
        @Html.LabelFor(m => fortalezasDebilidades.Debilidades1)
        @Html.TextBoxFor(m => fortalezasDebilidades.Debilidades1, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => fortalezasDebilidades.Debilidades1, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => fortalezasDebilidades.Debilidades2)
        @Html.TextBoxFor(m => fortalezasDebilidades.Debilidades2, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => fortalezasDebilidades.Debilidades2, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => fortalezasDebilidades.Debilidades3)
        @Html.TextBoxFor(m => fortalezasDebilidades.Debilidades3, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => fortalezasDebilidades.Debilidades3, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(m => fortalezasDebilidades.Debilidades4)
        @Html.TextBoxFor(m => fortalezasDebilidades.Debilidades4, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => fortalezasDebilidades.Debilidades4, "", new { @class = "text-danger" })
    </div>
    <br />

    <div class="card mt-4 shadow">
        <div class="card-header bg-primary text-white">
            <h5 class="mb-0">📊 Análisis de Potencial de Mejora</h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <canvas id="valoracionesChart" height="300"></canvas>
                </div>
                <div class="col-md-6">
                    <div class="p-3">
                        <h4 class="text-center">🔍 Resultados</h4>
                        <div id="potencial-mejora" class="mt-3">
                            <!-- Aquí se inyectará el análisis -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Configuración inicial
        const ctx = document.getElementById('valoracionesChart').getContext('2d');
        let chart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: [], datasets: [{
                    label: 'Valoración (1-5)',
                    backgroundColor: 'rgba(54, 162, 235, 0.6)',
                    borderColor: 'rgba(54, 162, 235, 1)',
                    data: []
                }]
            },
            options: {
                scales: { y: { beginAtZero: true, max: 5 } },
                responsive: true
            }
        });

        // Función para actualizar el análisis
        function actualizarAnalisis() {
            const selects = document.querySelectorAll('select[name*="Valoracion"]');
            const valoraciones = Array.from(selects)
                .map(s => ({
                    numero: s.name.match(/\[(\d+)\]/)[1],
                    valor: parseInt(s.value)

                }))
                .filter(v => !isNaN(v.valor));



            // Actualizar gráfico
            chart.data.labels = valoraciones.map(v => `Pregunta ${v.numero}`);
            chart.data.datasets[0].data = valoraciones.map(v => v.valor);
            chart.update();

            // Calcular métricas
            if (valoraciones.length > 0) {
                const promedio = valoraciones.reduce((sum, v) => sum + v.valor, 0) / valoraciones.length;
                const potencial = 5 - promedio;
                const preguntasBajas = valoraciones.filter(v => v.valor <= 2).length;

                // Generar HTML con animación
                document.getElementById("potencial-mejora").innerHTML = `
                    <div class="alert alert-info">
                        <h5>📌 Promedio Actual: <strong>${promedio.toFixed(2)}/5</strong></h5>
                        <div class="progress mt-2 mb-3" style="height: 20px;">
                            <div class="progress-bar bg-success"
                                 style="width: ${(promedio / 5 * 100)}%"
                                 role="progressbar"></div>
                        </div>
                        <h5>🚀 Potencial de Mejora: <strong>${potencial.toFixed(2)} puntos</strong></h5>
                        <p class="mt-2">${preguntasBajas} preguntas tienen valoración ≤ 2. ¡Enfócate en mejorarlas primero!</p>
                    </div>
                `;

                // Animación
                anime({
                    targets: '.progress-bar',
                    width: [`0%`, `${(promedio / 5 * 100)}%`],
                    duration: 1000,
                    easing: 'easeOutElastic'
                });
            }
        }

        // Escuchar cambios
        document.querySelectorAll('select[name*="Valoracion"]').forEach(select => {
            select.addEventListener('change', actualizarAnalisis);
        });

        // Ejecutar al cargar
        document.addEventListener('DOMContentLoaded', actualizarAnalisis);
    </script>



    <div class="d-flex justify-content-between">
        <a href="@Url.Action("Index", "AnalisisFODA")" class="btn btn-secondary">🔙5. ANÁLISIS INTERNO Y EXTERNO</a>
        <button type="submit" class="btn btn-success">💾 GUARDAR</button>
        <a href="@Url.Action("Index", "Menu")" class="btn btn-primary">7. MATRIZ PARTICIPACIÓN 🔜</a>
    </div>

}
